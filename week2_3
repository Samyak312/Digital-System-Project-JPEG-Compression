`timescale 1ns / 1ps

module week2_3(X, clk, en_dct, O);
    input [7:0] X [0:63];
    input clk;
    input en_dct;
    output reg [7:0] O [0:63];

reg signed [25:0] mat [0:63];
reg signed [25:0] dct_mat [0:63];
//reg signed [25:0] quant_mat [0:63];

reg signed [25:0] mat2d [0:7][0:7];

reg signed [25:0] A_t [0:63] = {100, 100, 100, 100, 100, 100, 100, 100,
                                139, 118, 79, 28, -28, -79, -118, -139,
                                131, 54, -54, -131, -131, -54, 54, 131,
                                118, -28, -139, -79, 79, 139, 28, -118,
                                100, -100, -100, 100, 100, -100, -100, 100,
                                79, -139, 28, 118, -118, -28, 139, -79,
                                54, -131, 131, -54, -54, 131, -131, 54,
                                28, -79, 118, -139, 139, -118, 79, -28};
                                           
reg signed [25:0] A [0:63]  = {100, 139, 131, 118, 100, 79, 54, 28,
                               100, 118, 54, -28, -100, -139, -131, -79,
                               100, 79, -54, -139, -100, 28, 131, 118,
                               100, 28, -131, -79, 100, 118, -54, -139,
                               100, -28, -131, 79, 100, -118, -54, 139,
                               100, -79, -54, 139, -100, -28, 131, -118,
                               100, -118, 54, 28, -100, 139, -131, 79,
                               100, -139, 131, -118, 100, -79, 54, -28};
                       
reg signed [25:0] quant [0:63] = {6, 4, 4, 6, 10, 16, 20, 24,
                                  5, 5, 6, 8, 10, 23, 24, 22,
                                  6, 5, 6, 10, 16, 23, 28, 22,
                                  6, 7, 9, 12, 20, 35, 32, 25,
                                  7, 9, 15, 22, 27, 44, 41, 31,
                                  10, 14, 22, 26, 32, 42, 45, 37,
                                  20, 26, 31, 35, 41, 48, 48, 40,
                                  29, 37, 38, 39, 45, 40, 41, 40};

integer i, j, k = 0;

reg [1:0]state = 0;
reg dd = 1;

always @(posedge clk) begin 
    if (~en_dct & dd) begin 

        case (state)    

            0: begin
                for (i = 0; i < 8; i = i + 1) begin
                    for (j = 0; j < 8; j = j + 1) begin
        
                        mat[8*i + j] = 0;
                        for (k = 0; k < 8; k = k + 1) begin
                            mat[8*i + j] = mat[8*i + j] + (A_t[8*i + k] * (X[8*k + j] - 128));
            
                        end
                    end
                end
                state = state + 1;
            end
            
            1: begin
                for (i = 0; i < 8; i = i + 1) begin
                    for (j = 0; j < 8; j = j + 1) begin
        
                        dct_mat[8*i + j] = 0;
                        for (k = 0; k < 8; k = k + 1) begin
                            dct_mat[8*i + j] = dct_mat[8*i + j] + (mat[8*i + k] * A[8*k + j]);
            
                        end
                    end
                end
                state = state + 1;
            end
            
            2: begin
                for (i = 0; i < 64; i = i + 1) begin
                    O[i] = (dct_mat[i] / 80000) / quant[i];
                end
                dd = 0;
            end
            
        endcase
        
    end
end


endmodule
